// 클래스 : 구조체와 유사, 참조 타입, 다중 상속 되지 않음

// 1. 프로퍼티 메서드

class Sample {
  var mutableProperty: Int = 100 // 가변 프로퍼티
  let immutableProperty: Int = 100 // 불변 프로퍼티

  static var typeProperty: Int = 100 // 타입 프로퍼티

  // 인스턴스 메서드
  func instanceMethod() {
    print("instance method")
  }

  // 타입 메서드
  // 재정의 불가 타입 메서드 - static
  static func typeMethod(){
    print("type method - static")
  }

  // 재정의 가능 타입 메서드 - class
  class func classMethod() {
    print("type method - class")
  }
}

// 2. 클래스 사용
var mutableReference: Sample = Sample()
mutableReference.mutableProperty = 200
// mutableReference.immutableProperty = 200

// 클래스의 인스턴스는 참조 타입이므로 let으로 선언되었더라도 인스턴스 프로퍼티의 값 변경이 가능합니다
let immutableReference: Sample = Sample()
immutableReference.mutableProperty = 200
// immutableReference.immutableProperty = 200

// let, var 상관없이 내부 mutableProperty 수정 가능

// 다만 참조정보를 변경할 수는 없습니다
// 컴파일 오류 발생
//immutableReference = mutableReference

// 참조 타입이라도 불변 인스턴스는 
// 인스턴스 생성 후에 수정할 수 없습니다
// 컴파일 오류 발생
//immutableReference.immutableProperty = 200



// 3. 타입 프로퍼티 및 메서드
Sample.typeProperty = 300
Sample.typeMethod() // type method

// 인스턴스에서는 타입 프로퍼티나 타입 메서드를
// 사용할 수 없습니다
// 컴파일 오류 발생
//mutableReference.typeProperty = 400
//mutableReference.typeMethod()

// 4. 학생 클래스
class Student {
  var name: String = "unknown"
  // 키워드도 `로 묶어주면 이름으로 사용할 수 있습니다
  var `class`: String = "Swift"

  // self는 인스턴스 자신을 지칭하며, 몇몇 경우를 제외하고 사용은 선택사항입니다
  class func selfIntroduce() {
    print("학생 타입")
  }
  func selfIntroduce() {
    print("저는 \(self.class)반 \(name)입니다")
  }
}

Student.selfIntroduce() // 학생 타입

// 인스턴스 생성
var yagom: Student = Student()
yagom.name = "yagom"
yagom.class = "스위프트"
yagom.selfIntroduce() // 저는 스위프트반 yagom입니다.

// 인스턴스 생성
// 가변 프로퍼티 let 인스턴스로 선언했는데 변경 가능 => 참조라서?
let jina: Student = Student()
jina.name = "jina"
jina.selfIntroduce() // 저는 Swift반 jina이빈다.
